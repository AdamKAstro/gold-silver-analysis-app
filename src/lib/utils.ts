// src/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

// This function is generated by shadcn/ui init
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Function to format numbers nicely
export function formatNumber(
  value: number | null | undefined,
  decimalPlaces = 0
): string {
  if (value === null || value === undefined || isNaN(value)) {
    return '-'; // Return hyphen for null/undefined/NaN
  }
  try {
     return value.toLocaleString(undefined, { // Use browser locale settings
       minimumFractionDigits: decimalPlaces,
       maximumFractionDigits: decimalPlaces,
     });
  } catch (e) {
     console.error("Error formatting number:", e);
     return value.toFixed(decimalPlaces); // Fallback to basic fixed decimals
  }
}

// Function to format currency values
export function formatCurrency(
  value: number | null | undefined,
  currencyCode: string = 'USD',
  decimalPlaces?: number
): string {
   if (value === null || value === undefined || isNaN(value)) {
    return '-'; // Return hyphen for null/undefined/NaN
  }

  const code = currencyCode?.toUpperCase() || 'USD'; // Ensure currency code is valid format

  const defaultDecimals = (code === 'USD' || code === 'CAD' || code === 'EUR') ? 2 : 0; // Default decimals common currencies
  const minDecimals = decimalPlaces !== undefined ? decimalPlaces : defaultDecimals;
  const maxDecimals = decimalPlaces !== undefined ? decimalPlaces : defaultDecimals;


  const options: Intl.NumberFormatOptions = {
    style: 'currency',
    currency: code,
    minimumFractionDigits: minDecimals,
    maximumFractionDigits: maxDecimals,
    currencyDisplay: 'symbol', // Use $, â‚¬, etc. where possible
  };

  // Use compact notation for large numbers (Billions/Millions)
  if (Math.abs(value) >= 1_000_000_000) {
    options.notation = 'compact';
    options.maximumFractionDigits= 2; // Show decimals for B/M
    options.minimumFractionDigits= 1; // Show at least 1 decimal for B/M
  } else if (Math.abs(value) >= 1_000_000) {
     options.notation = 'compact';
     options.maximumFractionDigits= 2;
     options.minimumFractionDigits= 1;
  }

  try {
    // Format using browser's Intl capabilities
    return new Intl.NumberFormat(undefined, options).format(value);
  } catch (e) {
    // Handle potential errors like invalid currency code
    console.warn(`Error formatting currency for code ${code}:`, e);
    // Fallback to basic number formatting with the code appended
    return `${formatNumber(value, maxDecimals)} ${code}`;
  }
}